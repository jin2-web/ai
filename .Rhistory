length(d2)
#(3) d1+d2, d2-d1, d1*d2, d2/d1의 각각의 결과를 출력하시오.
d1+d2
d2-d1
d1*d2
d2/d1
#(4) d1, d2의 값들의 합을 각각 출력하시오.
sum(d1)
sum(d2)
#(5) d1, d2에 있는 모든 값들의 합을 출력하시오.
sum(d1) + sum(d2)
sum( c(d1, d2) )
#(6) d2에서 가장 큰 값과 가장 작은 값을 출력하시오.
max(d2)
min(d2)
#(7) d2와 d1의 값들의 평균값을 각각 구하고 두 평균의 차이를 출력하시오.
mean(d2)
mean(d1)
mean(d2) - mean(d1)
#(8) d1의 값들을 큰 수에서 작은 수 순서로 정렬하여 출력하시오.
sort( d1, decreasing = T )
#(9) d1과 d2에서 작은 수에서 큰 수 순서로 각각 10개씩을 추출하여 d3에 저장하시오(결과적으로 d3에는 20개의 수가 저장).
d1[1:10]
d2[1:10]
d3 <- c( d1[1:10], d2[1:10] )
d3
# 10. 다음과 같이 벡터 v1을 생성한 다음 각 문제를 수행하기 위한 코드를 작성하고 답을 구하시오(문제를 풀다 보면 v1의 내용이 변경되기도 하는데, 모든 문제는 최초의 v1을 대상으로 하여 해결 할 것).
v1 <- 51:90
# (1) v1에서 60보다 작은 수를 모두 출력하시오.
v1[ v1<60 ]
# (2) v1에서 70보다 작은 수가 몇 개인지 출력하시오.
v1[ v1<70 ]
# (2) v1에서 70보다 작은 수가 몇 개인지 출력하시오.
length( v1[ v1<70 ] )
# (3) v1에서 65보다 큰 수들의 합을 출력하시오.
sum( v1[ v1>65 ] )
# (4) v1에서 60보다 크고 73보다 작은 수를 모두 출력하시오.
v1[ v1>60 &  v1 < 73]
# (5) v1에서 65보다 작거나 80보다 큰 수를 모두 출력하시오.
v1[ v1<65 | v1 > 80 ]
# (6) v1에서 7로 나누었을 때 나머지가 3인 수를 모두 출력하시오.
v1[ v1%%7 == 3 ]
# (7) v1에서 7의 배수들은 값을 0으로 변경하시오.
v1[ v1%%7 == 0 ]
# (7) v1에서 7의 배수들은 값을 0으로 변경하시오.
v1[ v1%%7 == 0 ] <- 0
v1
# (8) v1에서 짝수를 모두 합한 값을 출력하시오.
sum( v1[ v1%%2 == 0] )
# (9) v1에서 홀수이거나 80보다 큰 수를 모두 출력하시오.
v1[ v1%%2 == 1 | v1>80 ]
# (10) v1에서 3과 5의 공배수(3의 배수이면서 동시에 5의 배수 - 각각의 배수를 그리고) 를 출력하시오.
v1[v1%%3 ==0 & v1%%5 == 0]
# (10) v1에서 3과 5의 공배수(3의 배수이면서 동시에 5의 배수 - 각각의 배수를 그리고) 를 출력하시오.
v1 <- 51:90
v1[v1%%3 ==0 & v1%%5 == 0]
# (11) v1에서 짝수에 대해서만 2를 곱하여 저장하시오.
v1[v1%%2 == 0]
# (11) v1에서 짝수에 대해서만 2를 곱하여 저장하시오.
v1[v1%%2 == 0] * 2
# (12) v1에서 7의 배수들을 제거한 후 v1의 내용을 출력하시오.
v1 <- v1[v1%%7 != 0]
v1
# list
ds <- c(90,85,70,84)
my.info <- list( name="Tom", age=60, status=TRUE, score=ds )
my.info
my.info[ [1] ]
my.info[[1]]
my.info[1]
my.info[[1]]
my.info[2]
my.info[[2]]
my.info$score
my.info$status
my.info[[3]]
# factor 범주형 자료(예 동서남북 ) 저장 사용한다.
bt <- c('A','B','B','O','AB')
factor( bt )
bt.new <- factor( bt ) # factor만들기
bt.new
bt.new[5]
bt.new[1:3]
bt.new[-2]
levels( bt.new )
as.integer(bt.new)
bt.new[6] <- 'A'
bt.new
bt.new[7] <- 'O'
bt.new
bt.new[8] <- 'C'
nn <- c('동','서','남','북','북','북')
nn.new <- factor(nn)
levels(nn.new)
as.integer(nn.new)
nn.new[7] <- '동'
nn.new[8] <- 'North'
# 11
day <- c('Mon', 'Wed')
people <- list( name="Bill", age=20, gender='M', student=TRUE, day=day)
people
# 12
a <- c('Korea', 'Japan', 'China', 'Korea', 'India', 'China', 'Korea')
f <- factor(a)
f
f[4]
levels( f ) # (4) 팩터 f에 저장된 값의 종류를 출력하시오.
as.integer(f)
# 추가문제
a<- 4
b <- 5
c <- a+b
c
x2 <- 8
y=2*2 + 5*x1 + 10
y
x1 <- 6
y=2*2 + 5*x1 + 10
y
x2 <- 8
y=2*2 + 5*x2 + 10
y
y=2*2 + 5*x3 + 10
x3 <- 10
y=2*2 + 5*x3 + 10
y
val.a <- 10
sum.ab <- val.a+val.b
val.b <- 20
sum.ab <- val.a+val.b
vc.1 <- c(95,86,47,55,68)
vc.1
z <- matrix( 1:30, nrow = 5, ncol=6)
z
z <- matrix( 100:200, nrow = 10, ncol=10)
z <- matrix( 101:200, nrow = 10, ncol=10)
z
z <- matrix( 1:30, nrow = 5, ncol=6, byrow = T)
z
x <- 1:5
y <- 8:13
x
y
y <- 8:12
y
# 2차원 매트릭스
# 칸으로 합치기
sum.xy <- cbind( x, y)
# 2차원 매트릭스
# 칸으로 합치기
sum.xy <- cbind( x, y)
sum.xy
# 줄(row)합치기
sum.xy1 <- rbind(x, y)
sum.xy1
#  1~5
# 101~105
# 201~205
n1 <- 1:5
n2 <- 101:105
n3 <- 201:205
bind.n123 <- rbind(n1,n2,n3)
bind.n123
# matrix 한번에 만들기
z <- matrix( 12:1 , nrow=3, ncol=4, byrow = T  )
z
names(z) <- c('v1','v2','v3')
z
# matrix 한번에 만들기
z <- matrix( 12:1 , nrow=3, ncol=4, byrow = T  )
z
rownames(z) <- c('v1','v2','v3')
z
# 또는 1행씩 만들어서 합치기
v1 <- 12:9
v2 <- 8:5
v3 <- 4:1
z1 <- rbind( v1, v2, v3)
z1
# 5를 검색하기
z1[2,4]
z1[3,2]
z1
z1[1, ]
z1[, 2]
# 1행 3행
z1[ 1,3, ]
# 1행 3행
z1[ c(1,3), ]
# 2열, 4열
z1[   ,  c(2,4)  ]
# 2열~4열
z1[ , c(2,3,4)]
z1[ , 2:4 ]
# 행이름 주기
# 열이름 주기
score <- matrix( c(90,85,69,78, 85,96,49,95, 90,80,70,60 ), nrow=4, ncol=3 )
score
# 행이름 주기
rownames(score) <-c('John','Tom','Mark','Jane')
score
# 열이름 주기
colnames(score) <- c('English','Math', 'Science')
score
score[2,2]
score[4,3]
score['Jane', 'Science']  # score[4,3]
score['Jane', 'English']
# Tom점수를 검색하기
score[ 'Tom', ]
score
# Math점수를 검색하기
score[  ,  'Math' ]
# Math점수의 평균을 구하기
score[  ,  'Math' ]
# Math점수의 평균을 구하기
mean(  score[  ,  'Math' ] )
# 학생은 이름?
rownames( score )
# 과목명(열)은?
colnaems( score )
# 과목명(열)은?
colnames( score )
# 2번째 학생명은?
rownames( score )
# 2번째 학생명은?
rownames( score )[2]
# 3번째 과목명은?
colnames(score)[3]
# 1번문제
# (1)
z <- matrix(12:1, nrow=3, ncol=4, byrow = T)
z
rownames(z) <- c('v1','v2','v3')
z
# (2) 매트릭스 z의 열 이름을 각각 a1, a2, a3, a4로 바꾸시오.
colnames(z) <- c('a1','a2','a3','a4')
z
# (3) 매트릭스 z에 1~7 사이의 홀수로 구성된 벡터 v4를 행 방향으로 추가하시오.
v4 <- c( 1,3,5,7)
# (3) 매트릭스 z에 1~7 사이의 홀수로 구성된 벡터 v4를 행 방향으로 추가하시오.
v4 <- c( 1,3,5,7)
z <- rbind( z, v4 )
z
# (4) 4행에 있는 모든 값을 출력하시오.
z[4, ]
# (5) 2~4행의 값 중 a1, a3열에 있는 값을 출력하시오.
z[2:4, c( a1, a3 ) ]
# (5) 2~4행의 값 중 a1, a3열에 있는 값을 출력하시오.
z[2:4, c( 'a1', 'a3' ) ]
# (6) 매트릭스 z의 세 번째 행의 이름을 출력하시오.
rownames( z )[3]
# (7) 매트릭스 z의 세 번째 열의 이름을 출력하시오.
colnames(z)[3]
## #### 데이터 프레임
# 만들기
city <- c('서울','도쿄'','워싱턴')
## #### 데이터 프레임
# 만들기
city <- c('서울','도쿄','워싱턴')
rank <- c(1,3,2)
city.info <- data.frame(city, rank)
city.info
etc <- c(TRUE, TRUE, FALSE)
etc <- c(TRUE, TRUE, FALSE)
city.info <- data.frame(city, rank, etc)
city.info
city.info[3, 'city']
city.info[2, 'city']
city.info[1, 2]
city.info[1, 'rank']
city.info
rownames(city.info)
colnames( city.info )
iris
head( iris )
tail( iris )
head( iris, n=10 )
iris[, c(1:2)]
head( iris[, c(1:2)] )
head( iris[, 'Petal.Width'])
dim(iris)
str( iris )
iris[, 5 ]
unique(  iris[, 5 ]  )
table(iris[,"Species"]) # 품종별로 갯수 세기
colSums( iris )
colSums( iris[ , ] )
head( iris, n=10 )
colSums( iris[ , -5] )
colMeans( iris[ , -5] )
rowSums( iris[ , -5])
rowMeans( iris[, -'Species'])
rowMeans( iris[, -'Species'])
iris[, -'Species']
iris[, 'Species']
# 문제 2
state.x77
head( state.x77 )
dim( state.x77 )
str( state.x77 )
# (1) state.x77을 변환하여 st에 데이터프레임으로 저장하시오.
st <- data.frame(state.77)
# (st <- data.frame(state.x77))
#
# (2) st의 내용을 출력하시오.
st
# (1) state.x77을 변환하여 st에 데이터프레임으로 저장하시오.
st <- data.frame(state.77)
# (1) state.x77을 변환하여 st에 데이터프레임으로 저장하시오.
st <- data.frame(state.x77)
# (st <- data.frame(state.x77))
#
# (2) st의 내용을 출력하시오.
st
# (3) st의 열 이름을 출력하시오.
rownames( st )
# (3) st의 열 이름을 출력하시오.
colnames( st )
# (4) st의 행 이름을 출력하시오.
rownames( st )
# (5) st의 행의 개수와 열의 개수를 출력하시오.
nrow( st )
ncol( st )
# (6) st의 요약 정보를 출력하시오.
str( st )
# (6) st의 요약 정보를 출력하시오.
dim( st )
# (7) st의 행별 합계와 평균을 출력하시오.
rowSums( st )
rowMeans( st )
# (8) st의 열별 합계와 평균을 출력하시오.
colSums( st )
colMeans( st )
# (9) Florida 주의 모든 정보를 출력하시오.
st[ 'Florida',  ]
# (10) 50개 주의 수입(Income) 정보만 출력하시오.
st[ , 'Income' ]
## #### 데이터 프레임
# 만들기
city <- c('서울','도쿄','워싱턴')
rank <- c(1,3,2)
etc <- c(TRUE, TRUE, FALSE)
city.info <- data.frame(city, rank, etc )
city.info
# 행과 열을 바꾸기
t(city.info)
# (11) Texas 주의 면적(Area)을 출력하시오.
#
# (12) Ohio 주의 인구(Population)와 수입(Income)을 출력하시오.
#
# (13) 인구가 5,000 이상인 주의 데이터만 출력하시오.
subset( st, Population>=5000 )
# (11) Texas 주의 면적(Area)을 출력하시오.
st['Texas','Area']
# (12) Ohio 주의 인구(Population)와 수입(Income)을 출력하시오.
st[ 'Ohio', c( 'Population','Income')]
# (14) 수입이 4,500 이상인 주의 인구, 수입, 면적을 출력하시오.
subset( st, Income>= 4500)[ , c( 'Population', 'Income', 'Area') ]
# (15) 수입이 4,500 이상인 주는 몇 개인지 출력하시오.
subset( st, Income>= 4500)
# (15) 수입이 4,500 이상인 주는 몇 개인지 출력하시오.
nrow( subset( st, Income>= 4500) )
# (16) 전체 면적(Area)이 100,000 이상이고, 결빙일수(Frost)가 120 이상인 주의 정보를 출력하시오.
subset( st, Area>=100000 & Frost >= 120 )
# (17) 인구(Population)가 2,000 미만이고, 범죄율(Murder)이 12 미만인 주의 정보를 출력하시오.
subset( st, Population<2000 & Murder < 12 )
subset( st,Illiteracy>=2.0 )[, 'Income']
# (18) 문맹률(Illiteracy)이 2.0 이상인 주의 평균 수입은 얼마인지 출력하시오.
means( subset( st,Illiteracy>=2.0 )[, 'Income'] )
# (18) 문맹률(Illiteracy)이 2.0 이상인 주의 평균 수입은 얼마인지 출력하시오.
mean( subset( st,Illiteracy>=2.0 )[, 'Income'] )
ill.up2<- mean( subset( st,Illiteracy>=2.0 )[, 'Income'] )
ill.up2
ill.down2 <- mean( subset( st,Illiteracy< 2.0 )[, 'Income'] )
ill.down2
abs( ill.up2-ill.down2 )
# (20) 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력하시오.
st[, 'Life Exp']
# (20) 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력하시오.
st[, 'Life.Exp']
# (20) 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력하시오.
max( st[, 'Life.Exp'] )
subset( st, max( st[, 'Life.Exp'] ) )
subset( st, Life.Exp == max( st[, 'Life.Exp'] ) )
rownames(  subset( st, Life.Exp == max( st[, 'Life.Exp'] ) )   )
# (21) Pennsylvania 주보다 수입(Income)이 높은 주들을 출력하시오.
# 1단계 Pennsylvania주 수입(Income)구하기
st[ 'Pennsylvania', 'Income'  ]
# (21) Pennsylvania 주보다 수입(Income)이 높은 주들을 출력하시오.
# 1단계 Pennsylvania주 수입(Income)구하기
Pen.Income <- st[ 'Pennsylvania', 'Income'  ] # 4449
# 2단계 높은 주들
subset( st, Income > Pen.Income )
# 3단계 주들명 출력 (행이름만 출력)
rownames(  subset( st, Income > Pen.Income )  )
# 2.5 연산자
a <- matrix(1:20, 4, 5)
a
b <- matrix(21:40, 4,5)
b
2*a
b-5
a+b
b/a
a*b
class(iris)
class( state.x77 )
class( islands )
class(Ih)
class(lh)
is.matrix(iris)
class(iris)
is.matrix(iris)
is.data.frame(iris)
class( state.x77 )
# 매트릭스 --> 데이터프레임셋
st <- data.frame( state.x77 )
class( st )
class( iris )
as.iM  <- as.matrix(iris)
as.iM
class( as.iM )
class( iris )
as.iM  <- as.matrix(iris[, -5])
class( as.iM )
# 열추출하기
iris[, 'Species']
# 열추출하기
class(iris)
class(state.x77)
head( state.x77 )
state.x77[, 'Area']
iris[  , 5 ]
head( state.x77 )
state.x77[, 8]
iris[  , 5 ]
state.x77[, 8]
iris['pecies']
iris['species']
iris['Species']
state.x77['Area']
iris[5]
iris[5] # 열에 대한 인덱스 검색 가능 데이터프레임만 가능함
state.x77[8]
iris$Species
state.x77$Area
# (1) 위와 같은 내용을 가지는 데이터프레임 human을 생성하시오.
# 1단계 각 열별로 벡터 만들기
name <- c('Tom','Jane', "Nick")
age <- c(20,23,26)
gender <- c('M','F','M')
height <- c(180,160,175)
student <- c(TRUE, TRUE, FALSE)
# 2단계 데이터프레임
human <- data.frame(name, age, gender, height, student)
human
# (2) human에 (“Mary”, 24, “F”, 155, TRUE)를 추가하시오(list함수 사용).
human.new <- list( name='Mary', age=24, gender='F', height=155, student=TRUE)
# (2) human에 (“Mary”, 24, “F”, 155, TRUE)를 추가하시오(list함수 사용).
human.new <- list( name='Mary', age=24, gender='F', height=155, student=TRUE)
human <- rbind( human, human.new )
human
# (3) 이 데이터셋 열들의 자료형을 보이시오.
str( human )
dim( human )
# dim( human ) 행열의 갯수
class( human )
# (4) 평균 나이(age)와 평균 키(height)를 구하시오.
human$age
human['age']
human[ , 'age']
human[2]
human[,2]
mean( human$age )
mean( human$height )
# (5) 4번째 열을 제외한 human의 열 이름을 출력하시오.
colnames( human )
# (5) 4번째 열을 제외한 human의 열 이름을 출력하시오.
colnames( human[-4] )
colnames( human[-height] )
colnames( human[-'height'] )
# (6) 성별(gender) 인원수를 보이시오.
table( human$gender )
# 파일 불러오기
setwd("D:\ai\study\r_study")
# 파일 불러오기
setwd("D:\ai\study\r_study") #파일 불러올 경로명
air <- read.csv('airquality.csv')
# 파일 불러오기
setwd("D:/ai/study/r_study") #파일 불러올 경로명
air <- read.csv('airquality.csv')
air
class(air)
air2 <- read.csv('D:/ai/study/r_study/airquality.csv')
air2
head( air2 )
air2[Ozone]
air2('Ozone')
air2['Ozone']
air3 <- read.csv( file.choose() )
head( air3 )
# 저장하기
subset( iris, Species == 'setosa' )
# iris에서 Species == 'setosa' 인 것만 저장하기
iris.setosa <- subset( iris, Species == 'setosa' )
write.csv( iris.setosa, 'irisfilename.csv'  )
#          저장할자료,  파일명
# 첫째 열에는 열번호가 있다. 이 부분을 저장에서 제외하고 싶다.
write.csv( iris.setosa, 'irisFile1.csv', row.names=F )
write.csv( iris.setosa,  file.choose() )
write.csv( iris.setosa,  file.choose() )
